// Code generated by ogen, DO NOT EDIT.

package censusmanagement

import (
	"context"
	"net/url"
	"strings"

	"github.com/go-faster/errors"
	"github.com/ogen-go/ogen/conv"
	ht "github.com/ogen-go/ogen/http"
	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/uri"
)

func trimTrailingSlashes(u *url.URL) {
	u.Path = strings.TrimRight(u.Path, "/")
	u.RawPath = strings.TrimRight(u.RawPath, "/")
}

// Invoker invokes operations described by OpenAPI v3 specification.
type Invoker interface {
	// CreateDataset invokes createDataset operation.
	//
	// Create dataset.
	//
	// POST /api/v1/datasets
	CreateDataset(ctx context.Context, request CreateDatasetBody) (*IdResponseStatusCode, error)
	// CreateDestination invokes createDestination operation.
	//
	// Create Destination.
	//
	// POST /api/v1/destinations
	CreateDestination(ctx context.Context, request *CreateDestinationBody) (*IdResponseStatusCode, error)
	// CreateSource invokes createSource operation.
	//
	// Create Source.
	//
	// POST /api/v1/sources
	CreateSource(ctx context.Context, request *CreateSourceBody) (*IdResponseStatusCode, error)
	// CreateSync invokes createSync operation.
	//
	// Create Sync.
	//
	// POST /api/v1/syncs
	CreateSync(ctx context.Context, request *CreateSyncBody) (*SyncIdResponseStatusCode, error)
	// DeleteDataset invokes deleteDataset operation.
	//
	// Delete dataset.
	//
	// DELETE /api/v1/datasets/{dataset_id}
	DeleteDataset(ctx context.Context, params DeleteDatasetParams) (*StatusResponseStatusCode, error)
	// DeleteDestination invokes deleteDestination operation.
	//
	// Delete destination.
	//
	// DELETE /api/v1/destinations/{destination_id}
	DeleteDestination(ctx context.Context, params DeleteDestinationParams) (*StatusResponseStatusCode, error)
	// DeleteSource invokes deleteSource operation.
	//
	// Delete source.
	//
	// DELETE /api/v1/sources/{source_id}
	DeleteSource(ctx context.Context, params DeleteSourceParams) (*StatusResponseStatusCode, error)
	// DeleteSync invokes deleteSync operation.
	//
	// Delete sync.
	//
	// DELETE /api/v1/syncs/{sync_id}
	DeleteSync(ctx context.Context, params DeleteSyncParams) (*StatusResponseStatusCode, error)
	// GetApiV1 invokes getApiV1 operation.
	//
	// GET /api/v1
	GetApiV1(ctx context.Context) (GetApiV1Res, error)
	// GetDataset invokes getDataset operation.
	//
	// Fetch dataset.
	//
	// GET /api/v1/datasets/{dataset_id}
	GetDataset(ctx context.Context, params GetDatasetParams) (*DatasetResponseStatusCode, error)
	// GetDestination invokes getDestination operation.
	//
	// Fetch destination.
	//
	// GET /api/v1/destinations/{destination_id}
	GetDestination(ctx context.Context, params GetDestinationParams) (*DestinationResponseStatusCode, error)
	// GetSource invokes getSource operation.
	//
	// Fetch source.
	//
	// GET /api/v1/sources/{source_id}
	GetSource(ctx context.Context, params GetSourceParams) (*SourceResponseStatusCode, error)
	// GetSync invokes getSync operation.
	//
	// Fetch sync.
	//
	// GET /api/v1/syncs/{sync_id}
	GetSync(ctx context.Context, params GetSyncParams) (*SyncResponseStatusCode, error)
	// UpdateDataset invokes updateDataset operation.
	//
	// Update dataset.
	//
	// PATCH /api/v1/datasets/{dataset_id}
	UpdateDataset(ctx context.Context, request UpdateDatasetBody, params UpdateDatasetParams) (*DatasetResponseStatusCode, error)
	// UpdateDestination invokes updateDestination operation.
	//
	// Update destination.
	//
	// PATCH /api/v1/destinations/{destination_id}
	UpdateDestination(ctx context.Context, request *UpdateDestinationBody, params UpdateDestinationParams) (*DestinationResponseStatusCode, error)
	// UpdateSource invokes updateSource operation.
	//
	// Update source.
	//
	// PATCH /api/v1/sources/{source_id}
	UpdateSource(ctx context.Context, request *UpdateSourceBody, params UpdateSourceParams) (*SourceResponseStatusCode, error)
	// UpdateSync invokes updateSync operation.
	//
	// Update sync.
	//
	// PATCH /api/v1/syncs/{sync_id}
	UpdateSync(ctx context.Context, request *UpdateSyncBody, params UpdateSyncParams) (*SyncResponseStatusCode, error)
}

// Client implements OAS client.
type Client struct {
	serverURL *url.URL
	sec       SecuritySource
	baseClient
}
type errorHandler interface {
	NewError(ctx context.Context, err error) *StatusResponseStatusCode
}

var _ Handler = struct {
	errorHandler
	*Client
}{}

// NewClient initializes new Client defined by OAS.
func NewClient(serverURL string, sec SecuritySource, opts ...ClientOption) (*Client, error) {
	u, err := url.Parse(serverURL)
	if err != nil {
		return nil, err
	}
	trimTrailingSlashes(u)

	c, err := newClientConfig(opts...).baseClient()
	if err != nil {
		return nil, err
	}
	return &Client{
		serverURL:  u,
		sec:        sec,
		baseClient: c,
	}, nil
}

type serverURLKey struct{}

// WithServerURL sets context key to override server URL.
func WithServerURL(ctx context.Context, u *url.URL) context.Context {
	return context.WithValue(ctx, serverURLKey{}, u)
}

func (c *Client) requestURL(ctx context.Context) *url.URL {
	u, ok := ctx.Value(serverURLKey{}).(*url.URL)
	if !ok {
		return c.serverURL
	}
	return u
}

// CreateDataset invokes createDataset operation.
//
// Create dataset.
//
// POST /api/v1/datasets
func (c *Client) CreateDataset(ctx context.Context, request CreateDatasetBody) (*IdResponseStatusCode, error) {
	res, err := c.sendCreateDataset(ctx, request)
	return res, err
}

func (c *Client) sendCreateDataset(ctx context.Context, request CreateDatasetBody) (res *IdResponseStatusCode, err error) {
	// Validate request before sending.
	if err := func() error {
		if err := request.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/api/v1/datasets"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeCreateDatasetRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	{
		type bitset = [1]uint8
		var satisfied bitset
		{

			switch err := c.securityWorkspaceApiKey(ctx, CreateDatasetOperation, r); {
			case err == nil: // if NO error
				satisfied[0] |= 1 << 0
			case errors.Is(err, ogenerrors.ErrSkipClientSecurity):
				// Skip this security.
			default:
				return res, errors.Wrap(err, "security \"WorkspaceApiKey\"")
			}
		}

		if ok := func() bool {
		nextRequirement:
			for _, requirement := range []bitset{
				{0b00000001},
			} {
				for i, mask := range requirement {
					if satisfied[i]&mask != mask {
						continue nextRequirement
					}
				}
				return true
			}
			return false
		}(); !ok {
			return res, ogenerrors.ErrSecurityRequirementIsNotSatisfied
		}
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeCreateDatasetResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// CreateDestination invokes createDestination operation.
//
// Create Destination.
//
// POST /api/v1/destinations
func (c *Client) CreateDestination(ctx context.Context, request *CreateDestinationBody) (*IdResponseStatusCode, error) {
	res, err := c.sendCreateDestination(ctx, request)
	return res, err
}

func (c *Client) sendCreateDestination(ctx context.Context, request *CreateDestinationBody) (res *IdResponseStatusCode, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/api/v1/destinations"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeCreateDestinationRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	{
		type bitset = [1]uint8
		var satisfied bitset
		{

			switch err := c.securityWorkspaceApiKey(ctx, CreateDestinationOperation, r); {
			case err == nil: // if NO error
				satisfied[0] |= 1 << 0
			case errors.Is(err, ogenerrors.ErrSkipClientSecurity):
				// Skip this security.
			default:
				return res, errors.Wrap(err, "security \"WorkspaceApiKey\"")
			}
		}

		if ok := func() bool {
		nextRequirement:
			for _, requirement := range []bitset{
				{0b00000001},
			} {
				for i, mask := range requirement {
					if satisfied[i]&mask != mask {
						continue nextRequirement
					}
				}
				return true
			}
			return false
		}(); !ok {
			return res, ogenerrors.ErrSecurityRequirementIsNotSatisfied
		}
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeCreateDestinationResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// CreateSource invokes createSource operation.
//
// Create Source.
//
// POST /api/v1/sources
func (c *Client) CreateSource(ctx context.Context, request *CreateSourceBody) (*IdResponseStatusCode, error) {
	res, err := c.sendCreateSource(ctx, request)
	return res, err
}

func (c *Client) sendCreateSource(ctx context.Context, request *CreateSourceBody) (res *IdResponseStatusCode, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/api/v1/sources"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeCreateSourceRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	{
		type bitset = [1]uint8
		var satisfied bitset
		{

			switch err := c.securityWorkspaceApiKey(ctx, CreateSourceOperation, r); {
			case err == nil: // if NO error
				satisfied[0] |= 1 << 0
			case errors.Is(err, ogenerrors.ErrSkipClientSecurity):
				// Skip this security.
			default:
				return res, errors.Wrap(err, "security \"WorkspaceApiKey\"")
			}
		}

		if ok := func() bool {
		nextRequirement:
			for _, requirement := range []bitset{
				{0b00000001},
			} {
				for i, mask := range requirement {
					if satisfied[i]&mask != mask {
						continue nextRequirement
					}
				}
				return true
			}
			return false
		}(); !ok {
			return res, ogenerrors.ErrSecurityRequirementIsNotSatisfied
		}
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeCreateSourceResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// CreateSync invokes createSync operation.
//
// Create Sync.
//
// POST /api/v1/syncs
func (c *Client) CreateSync(ctx context.Context, request *CreateSyncBody) (*SyncIdResponseStatusCode, error) {
	res, err := c.sendCreateSync(ctx, request)
	return res, err
}

func (c *Client) sendCreateSync(ctx context.Context, request *CreateSyncBody) (res *SyncIdResponseStatusCode, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/api/v1/syncs"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeCreateSyncRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	{
		type bitset = [1]uint8
		var satisfied bitset
		{

			switch err := c.securityWorkspaceApiKey(ctx, CreateSyncOperation, r); {
			case err == nil: // if NO error
				satisfied[0] |= 1 << 0
			case errors.Is(err, ogenerrors.ErrSkipClientSecurity):
				// Skip this security.
			default:
				return res, errors.Wrap(err, "security \"WorkspaceApiKey\"")
			}
		}

		if ok := func() bool {
		nextRequirement:
			for _, requirement := range []bitset{
				{0b00000001},
			} {
				for i, mask := range requirement {
					if satisfied[i]&mask != mask {
						continue nextRequirement
					}
				}
				return true
			}
			return false
		}(); !ok {
			return res, ogenerrors.ErrSecurityRequirementIsNotSatisfied
		}
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeCreateSyncResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// DeleteDataset invokes deleteDataset operation.
//
// Delete dataset.
//
// DELETE /api/v1/datasets/{dataset_id}
func (c *Client) DeleteDataset(ctx context.Context, params DeleteDatasetParams) (*StatusResponseStatusCode, error) {
	res, err := c.sendDeleteDataset(ctx, params)
	return res, err
}

func (c *Client) sendDeleteDataset(ctx context.Context, params DeleteDatasetParams) (res *StatusResponseStatusCode, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [2]string
	pathParts[0] = "/api/v1/datasets/"
	{
		// Encode "dataset_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "dataset_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.DatasetID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "DELETE", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	{
		type bitset = [1]uint8
		var satisfied bitset
		{

			switch err := c.securityWorkspaceApiKey(ctx, DeleteDatasetOperation, r); {
			case err == nil: // if NO error
				satisfied[0] |= 1 << 0
			case errors.Is(err, ogenerrors.ErrSkipClientSecurity):
				// Skip this security.
			default:
				return res, errors.Wrap(err, "security \"WorkspaceApiKey\"")
			}
		}

		if ok := func() bool {
		nextRequirement:
			for _, requirement := range []bitset{
				{0b00000001},
			} {
				for i, mask := range requirement {
					if satisfied[i]&mask != mask {
						continue nextRequirement
					}
				}
				return true
			}
			return false
		}(); !ok {
			return res, ogenerrors.ErrSecurityRequirementIsNotSatisfied
		}
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeDeleteDatasetResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// DeleteDestination invokes deleteDestination operation.
//
// Delete destination.
//
// DELETE /api/v1/destinations/{destination_id}
func (c *Client) DeleteDestination(ctx context.Context, params DeleteDestinationParams) (*StatusResponseStatusCode, error) {
	res, err := c.sendDeleteDestination(ctx, params)
	return res, err
}

func (c *Client) sendDeleteDestination(ctx context.Context, params DeleteDestinationParams) (res *StatusResponseStatusCode, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [2]string
	pathParts[0] = "/api/v1/destinations/"
	{
		// Encode "destination_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "destination_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.DestinationID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "DELETE", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	{
		type bitset = [1]uint8
		var satisfied bitset
		{

			switch err := c.securityWorkspaceApiKey(ctx, DeleteDestinationOperation, r); {
			case err == nil: // if NO error
				satisfied[0] |= 1 << 0
			case errors.Is(err, ogenerrors.ErrSkipClientSecurity):
				// Skip this security.
			default:
				return res, errors.Wrap(err, "security \"WorkspaceApiKey\"")
			}
		}

		if ok := func() bool {
		nextRequirement:
			for _, requirement := range []bitset{
				{0b00000001},
			} {
				for i, mask := range requirement {
					if satisfied[i]&mask != mask {
						continue nextRequirement
					}
				}
				return true
			}
			return false
		}(); !ok {
			return res, ogenerrors.ErrSecurityRequirementIsNotSatisfied
		}
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeDeleteDestinationResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// DeleteSource invokes deleteSource operation.
//
// Delete source.
//
// DELETE /api/v1/sources/{source_id}
func (c *Client) DeleteSource(ctx context.Context, params DeleteSourceParams) (*StatusResponseStatusCode, error) {
	res, err := c.sendDeleteSource(ctx, params)
	return res, err
}

func (c *Client) sendDeleteSource(ctx context.Context, params DeleteSourceParams) (res *StatusResponseStatusCode, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [2]string
	pathParts[0] = "/api/v1/sources/"
	{
		// Encode "source_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "source_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.SourceID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "DELETE", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	{
		type bitset = [1]uint8
		var satisfied bitset
		{

			switch err := c.securityWorkspaceApiKey(ctx, DeleteSourceOperation, r); {
			case err == nil: // if NO error
				satisfied[0] |= 1 << 0
			case errors.Is(err, ogenerrors.ErrSkipClientSecurity):
				// Skip this security.
			default:
				return res, errors.Wrap(err, "security \"WorkspaceApiKey\"")
			}
		}

		if ok := func() bool {
		nextRequirement:
			for _, requirement := range []bitset{
				{0b00000001},
			} {
				for i, mask := range requirement {
					if satisfied[i]&mask != mask {
						continue nextRequirement
					}
				}
				return true
			}
			return false
		}(); !ok {
			return res, ogenerrors.ErrSecurityRequirementIsNotSatisfied
		}
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeDeleteSourceResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// DeleteSync invokes deleteSync operation.
//
// Delete sync.
//
// DELETE /api/v1/syncs/{sync_id}
func (c *Client) DeleteSync(ctx context.Context, params DeleteSyncParams) (*StatusResponseStatusCode, error) {
	res, err := c.sendDeleteSync(ctx, params)
	return res, err
}

func (c *Client) sendDeleteSync(ctx context.Context, params DeleteSyncParams) (res *StatusResponseStatusCode, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [2]string
	pathParts[0] = "/api/v1/syncs/"
	{
		// Encode "sync_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "sync_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.SyncID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "DELETE", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	{
		type bitset = [1]uint8
		var satisfied bitset
		{

			switch err := c.securityWorkspaceApiKey(ctx, DeleteSyncOperation, r); {
			case err == nil: // if NO error
				satisfied[0] |= 1 << 0
			case errors.Is(err, ogenerrors.ErrSkipClientSecurity):
				// Skip this security.
			default:
				return res, errors.Wrap(err, "security \"WorkspaceApiKey\"")
			}
		}

		if ok := func() bool {
		nextRequirement:
			for _, requirement := range []bitset{
				{0b00000001},
			} {
				for i, mask := range requirement {
					if satisfied[i]&mask != mask {
						continue nextRequirement
					}
				}
				return true
			}
			return false
		}(); !ok {
			return res, ogenerrors.ErrSecurityRequirementIsNotSatisfied
		}
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeDeleteSyncResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// GetApiV1 invokes getApiV1 operation.
//
// GET /api/v1
func (c *Client) GetApiV1(ctx context.Context) (GetApiV1Res, error) {
	res, err := c.sendGetApiV1(ctx)
	return res, err
}

func (c *Client) sendGetApiV1(ctx context.Context) (res GetApiV1Res, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/api/v1"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	{
		type bitset = [1]uint8
		var satisfied bitset
		{

			switch err := c.securityWorkspaceApiKey(ctx, GetApiV1Operation, r); {
			case err == nil: // if NO error
				satisfied[0] |= 1 << 0
			case errors.Is(err, ogenerrors.ErrSkipClientSecurity):
				// Skip this security.
			default:
				return res, errors.Wrap(err, "security \"WorkspaceApiKey\"")
			}
		}

		if ok := func() bool {
		nextRequirement:
			for _, requirement := range []bitset{
				{0b00000001},
			} {
				for i, mask := range requirement {
					if satisfied[i]&mask != mask {
						continue nextRequirement
					}
				}
				return true
			}
			return false
		}(); !ok {
			return res, ogenerrors.ErrSecurityRequirementIsNotSatisfied
		}
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeGetApiV1Response(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// GetDataset invokes getDataset operation.
//
// Fetch dataset.
//
// GET /api/v1/datasets/{dataset_id}
func (c *Client) GetDataset(ctx context.Context, params GetDatasetParams) (*DatasetResponseStatusCode, error) {
	res, err := c.sendGetDataset(ctx, params)
	return res, err
}

func (c *Client) sendGetDataset(ctx context.Context, params GetDatasetParams) (res *DatasetResponseStatusCode, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [2]string
	pathParts[0] = "/api/v1/datasets/"
	{
		// Encode "dataset_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "dataset_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.DatasetID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	{
		type bitset = [1]uint8
		var satisfied bitset
		{

			switch err := c.securityWorkspaceApiKey(ctx, GetDatasetOperation, r); {
			case err == nil: // if NO error
				satisfied[0] |= 1 << 0
			case errors.Is(err, ogenerrors.ErrSkipClientSecurity):
				// Skip this security.
			default:
				return res, errors.Wrap(err, "security \"WorkspaceApiKey\"")
			}
		}

		if ok := func() bool {
		nextRequirement:
			for _, requirement := range []bitset{
				{0b00000001},
			} {
				for i, mask := range requirement {
					if satisfied[i]&mask != mask {
						continue nextRequirement
					}
				}
				return true
			}
			return false
		}(); !ok {
			return res, ogenerrors.ErrSecurityRequirementIsNotSatisfied
		}
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeGetDatasetResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// GetDestination invokes getDestination operation.
//
// Fetch destination.
//
// GET /api/v1/destinations/{destination_id}
func (c *Client) GetDestination(ctx context.Context, params GetDestinationParams) (*DestinationResponseStatusCode, error) {
	res, err := c.sendGetDestination(ctx, params)
	return res, err
}

func (c *Client) sendGetDestination(ctx context.Context, params GetDestinationParams) (res *DestinationResponseStatusCode, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [2]string
	pathParts[0] = "/api/v1/destinations/"
	{
		// Encode "destination_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "destination_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.DestinationID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	{
		type bitset = [1]uint8
		var satisfied bitset
		{

			switch err := c.securityWorkspaceApiKey(ctx, GetDestinationOperation, r); {
			case err == nil: // if NO error
				satisfied[0] |= 1 << 0
			case errors.Is(err, ogenerrors.ErrSkipClientSecurity):
				// Skip this security.
			default:
				return res, errors.Wrap(err, "security \"WorkspaceApiKey\"")
			}
		}

		if ok := func() bool {
		nextRequirement:
			for _, requirement := range []bitset{
				{0b00000001},
			} {
				for i, mask := range requirement {
					if satisfied[i]&mask != mask {
						continue nextRequirement
					}
				}
				return true
			}
			return false
		}(); !ok {
			return res, ogenerrors.ErrSecurityRequirementIsNotSatisfied
		}
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeGetDestinationResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// GetSource invokes getSource operation.
//
// Fetch source.
//
// GET /api/v1/sources/{source_id}
func (c *Client) GetSource(ctx context.Context, params GetSourceParams) (*SourceResponseStatusCode, error) {
	res, err := c.sendGetSource(ctx, params)
	return res, err
}

func (c *Client) sendGetSource(ctx context.Context, params GetSourceParams) (res *SourceResponseStatusCode, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [2]string
	pathParts[0] = "/api/v1/sources/"
	{
		// Encode "source_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "source_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.SourceID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	{
		type bitset = [1]uint8
		var satisfied bitset
		{

			switch err := c.securityWorkspaceApiKey(ctx, GetSourceOperation, r); {
			case err == nil: // if NO error
				satisfied[0] |= 1 << 0
			case errors.Is(err, ogenerrors.ErrSkipClientSecurity):
				// Skip this security.
			default:
				return res, errors.Wrap(err, "security \"WorkspaceApiKey\"")
			}
		}

		if ok := func() bool {
		nextRequirement:
			for _, requirement := range []bitset{
				{0b00000001},
			} {
				for i, mask := range requirement {
					if satisfied[i]&mask != mask {
						continue nextRequirement
					}
				}
				return true
			}
			return false
		}(); !ok {
			return res, ogenerrors.ErrSecurityRequirementIsNotSatisfied
		}
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeGetSourceResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// GetSync invokes getSync operation.
//
// Fetch sync.
//
// GET /api/v1/syncs/{sync_id}
func (c *Client) GetSync(ctx context.Context, params GetSyncParams) (*SyncResponseStatusCode, error) {
	res, err := c.sendGetSync(ctx, params)
	return res, err
}

func (c *Client) sendGetSync(ctx context.Context, params GetSyncParams) (res *SyncResponseStatusCode, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [2]string
	pathParts[0] = "/api/v1/syncs/"
	{
		// Encode "sync_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "sync_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.SyncID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	{
		type bitset = [1]uint8
		var satisfied bitset
		{

			switch err := c.securityWorkspaceApiKey(ctx, GetSyncOperation, r); {
			case err == nil: // if NO error
				satisfied[0] |= 1 << 0
			case errors.Is(err, ogenerrors.ErrSkipClientSecurity):
				// Skip this security.
			default:
				return res, errors.Wrap(err, "security \"WorkspaceApiKey\"")
			}
		}

		if ok := func() bool {
		nextRequirement:
			for _, requirement := range []bitset{
				{0b00000001},
			} {
				for i, mask := range requirement {
					if satisfied[i]&mask != mask {
						continue nextRequirement
					}
				}
				return true
			}
			return false
		}(); !ok {
			return res, ogenerrors.ErrSecurityRequirementIsNotSatisfied
		}
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeGetSyncResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// UpdateDataset invokes updateDataset operation.
//
// Update dataset.
//
// PATCH /api/v1/datasets/{dataset_id}
func (c *Client) UpdateDataset(ctx context.Context, request UpdateDatasetBody, params UpdateDatasetParams) (*DatasetResponseStatusCode, error) {
	res, err := c.sendUpdateDataset(ctx, request, params)
	return res, err
}

func (c *Client) sendUpdateDataset(ctx context.Context, request UpdateDatasetBody, params UpdateDatasetParams) (res *DatasetResponseStatusCode, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [2]string
	pathParts[0] = "/api/v1/datasets/"
	{
		// Encode "dataset_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "dataset_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.DatasetID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "PATCH", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeUpdateDatasetRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	{
		type bitset = [1]uint8
		var satisfied bitset
		{

			switch err := c.securityWorkspaceApiKey(ctx, UpdateDatasetOperation, r); {
			case err == nil: // if NO error
				satisfied[0] |= 1 << 0
			case errors.Is(err, ogenerrors.ErrSkipClientSecurity):
				// Skip this security.
			default:
				return res, errors.Wrap(err, "security \"WorkspaceApiKey\"")
			}
		}

		if ok := func() bool {
		nextRequirement:
			for _, requirement := range []bitset{
				{0b00000001},
			} {
				for i, mask := range requirement {
					if satisfied[i]&mask != mask {
						continue nextRequirement
					}
				}
				return true
			}
			return false
		}(); !ok {
			return res, ogenerrors.ErrSecurityRequirementIsNotSatisfied
		}
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeUpdateDatasetResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// UpdateDestination invokes updateDestination operation.
//
// Update destination.
//
// PATCH /api/v1/destinations/{destination_id}
func (c *Client) UpdateDestination(ctx context.Context, request *UpdateDestinationBody, params UpdateDestinationParams) (*DestinationResponseStatusCode, error) {
	res, err := c.sendUpdateDestination(ctx, request, params)
	return res, err
}

func (c *Client) sendUpdateDestination(ctx context.Context, request *UpdateDestinationBody, params UpdateDestinationParams) (res *DestinationResponseStatusCode, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [2]string
	pathParts[0] = "/api/v1/destinations/"
	{
		// Encode "destination_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "destination_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.DestinationID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "PATCH", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeUpdateDestinationRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	{
		type bitset = [1]uint8
		var satisfied bitset
		{

			switch err := c.securityWorkspaceApiKey(ctx, UpdateDestinationOperation, r); {
			case err == nil: // if NO error
				satisfied[0] |= 1 << 0
			case errors.Is(err, ogenerrors.ErrSkipClientSecurity):
				// Skip this security.
			default:
				return res, errors.Wrap(err, "security \"WorkspaceApiKey\"")
			}
		}

		if ok := func() bool {
		nextRequirement:
			for _, requirement := range []bitset{
				{0b00000001},
			} {
				for i, mask := range requirement {
					if satisfied[i]&mask != mask {
						continue nextRequirement
					}
				}
				return true
			}
			return false
		}(); !ok {
			return res, ogenerrors.ErrSecurityRequirementIsNotSatisfied
		}
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeUpdateDestinationResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// UpdateSource invokes updateSource operation.
//
// Update source.
//
// PATCH /api/v1/sources/{source_id}
func (c *Client) UpdateSource(ctx context.Context, request *UpdateSourceBody, params UpdateSourceParams) (*SourceResponseStatusCode, error) {
	res, err := c.sendUpdateSource(ctx, request, params)
	return res, err
}

func (c *Client) sendUpdateSource(ctx context.Context, request *UpdateSourceBody, params UpdateSourceParams) (res *SourceResponseStatusCode, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [2]string
	pathParts[0] = "/api/v1/sources/"
	{
		// Encode "source_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "source_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.SourceID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "PATCH", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeUpdateSourceRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	{
		type bitset = [1]uint8
		var satisfied bitset
		{

			switch err := c.securityWorkspaceApiKey(ctx, UpdateSourceOperation, r); {
			case err == nil: // if NO error
				satisfied[0] |= 1 << 0
			case errors.Is(err, ogenerrors.ErrSkipClientSecurity):
				// Skip this security.
			default:
				return res, errors.Wrap(err, "security \"WorkspaceApiKey\"")
			}
		}

		if ok := func() bool {
		nextRequirement:
			for _, requirement := range []bitset{
				{0b00000001},
			} {
				for i, mask := range requirement {
					if satisfied[i]&mask != mask {
						continue nextRequirement
					}
				}
				return true
			}
			return false
		}(); !ok {
			return res, ogenerrors.ErrSecurityRequirementIsNotSatisfied
		}
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeUpdateSourceResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// UpdateSync invokes updateSync operation.
//
// Update sync.
//
// PATCH /api/v1/syncs/{sync_id}
func (c *Client) UpdateSync(ctx context.Context, request *UpdateSyncBody, params UpdateSyncParams) (*SyncResponseStatusCode, error) {
	res, err := c.sendUpdateSync(ctx, request, params)
	return res, err
}

func (c *Client) sendUpdateSync(ctx context.Context, request *UpdateSyncBody, params UpdateSyncParams) (res *SyncResponseStatusCode, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [2]string
	pathParts[0] = "/api/v1/syncs/"
	{
		// Encode "sync_id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "sync_id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.SyncID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "PATCH", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeUpdateSyncRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	{
		type bitset = [1]uint8
		var satisfied bitset
		{

			switch err := c.securityWorkspaceApiKey(ctx, UpdateSyncOperation, r); {
			case err == nil: // if NO error
				satisfied[0] |= 1 << 0
			case errors.Is(err, ogenerrors.ErrSkipClientSecurity):
				// Skip this security.
			default:
				return res, errors.Wrap(err, "security \"WorkspaceApiKey\"")
			}
		}

		if ok := func() bool {
		nextRequirement:
			for _, requirement := range []bitset{
				{0b00000001},
			} {
				for i, mask := range requirement {
					if satisfied[i]&mask != mask {
						continue nextRequirement
					}
				}
				return true
			}
			return false
		}(); !ok {
			return res, ogenerrors.ErrSecurityRequirementIsNotSatisfied
		}
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeUpdateSyncResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}
