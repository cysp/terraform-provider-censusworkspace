// Code generated by ogen, DO NOT EDIT.

package censusmanagement

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// CreateDataset implements createDataset operation.
	//
	// Create dataset.
	//
	// POST /api/v1/datasets
	CreateDataset(ctx context.Context, req CreateDatasetBody) (*IdResponseStatusCode, error)
	// CreateDestination implements createDestination operation.
	//
	// Create Destination.
	//
	// POST /api/v1/destinations
	CreateDestination(ctx context.Context, req *CreateDestinationBody) (*IdResponseStatusCode, error)
	// CreateSource implements createSource operation.
	//
	// Create Source.
	//
	// POST /api/v1/sources
	CreateSource(ctx context.Context, req *CreateSourceBody) (*IdResponseStatusCode, error)
	// CreateSync implements createSync operation.
	//
	// Create Sync.
	//
	// POST /api/v1/syncs
	CreateSync(ctx context.Context, req *CreateOrUpdateSyncBody) (*SyncIdResponseStatusCode, error)
	// DeleteDataset implements deleteDataset operation.
	//
	// Delete dataset.
	//
	// DELETE /api/v1/datasets/{dataset_id}
	DeleteDataset(ctx context.Context, params DeleteDatasetParams) (*StatusResponseStatusCode, error)
	// DeleteDestination implements deleteDestination operation.
	//
	// Delete destination.
	//
	// DELETE /api/v1/destinations/{destination_id}
	DeleteDestination(ctx context.Context, params DeleteDestinationParams) (*StatusResponseStatusCode, error)
	// DeleteSource implements deleteSource operation.
	//
	// Delete source.
	//
	// DELETE /api/v1/sources/{source_id}
	DeleteSource(ctx context.Context, params DeleteSourceParams) (*StatusResponseStatusCode, error)
	// DeleteSync implements deleteSync operation.
	//
	// Delete sync.
	//
	// DELETE /api/v1/syncs/{sync_id}
	DeleteSync(ctx context.Context, params DeleteSyncParams) (*StatusResponseStatusCode, error)
	// GetApiV1 implements getApiV1 operation.
	//
	// GET /api/v1
	GetApiV1(ctx context.Context) (GetApiV1Res, error)
	// GetDataset implements getDataset operation.
	//
	// Fetch dataset.
	//
	// GET /api/v1/datasets/{dataset_id}
	GetDataset(ctx context.Context, params GetDatasetParams) (*DatasetResponseStatusCode, error)
	// GetDestination implements getDestination operation.
	//
	// Fetch destination.
	//
	// GET /api/v1/destinations/{destination_id}
	GetDestination(ctx context.Context, params GetDestinationParams) (*DestinationResponseStatusCode, error)
	// GetSource implements getSource operation.
	//
	// Fetch source.
	//
	// GET /api/v1/sources/{source_id}
	GetSource(ctx context.Context, params GetSourceParams) (*SourceResponseStatusCode, error)
	// GetSync implements getSync operation.
	//
	// Fetch sync.
	//
	// GET /api/v1/syncs/{sync_id}
	GetSync(ctx context.Context, params GetSyncParams) (*SyncResponseStatusCode, error)
	// UpdateDataset implements updateDataset operation.
	//
	// Update dataset.
	//
	// PATCH /api/v1/datasets/{dataset_id}
	UpdateDataset(ctx context.Context, req UpdateDatasetBody, params UpdateDatasetParams) (*DatasetResponseStatusCode, error)
	// UpdateDestination implements updateDestination operation.
	//
	// Update destination.
	//
	// PATCH /api/v1/destinations/{destination_id}
	UpdateDestination(ctx context.Context, req *UpdateDestinationBody, params UpdateDestinationParams) (*DestinationResponseStatusCode, error)
	// UpdateSource implements updateSource operation.
	//
	// Update source.
	//
	// PATCH /api/v1/sources/{source_id}
	UpdateSource(ctx context.Context, req *UpdateSourceBody, params UpdateSourceParams) (*SourceResponseStatusCode, error)
	// UpdateSync implements updateSync operation.
	//
	// Update sync.
	//
	// PATCH /api/v1/syncs/{sync_id}
	UpdateSync(ctx context.Context, req *CreateOrUpdateSyncBody, params UpdateSyncParams) (*SyncResponseStatusCode, error)
	// NewError creates *StatusResponseStatusCode from error returned by handler.
	//
	// Used for common default response.
	NewError(ctx context.Context, err error) *StatusResponseStatusCode
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h   Handler
	sec SecurityHandler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, sec SecurityHandler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		sec:        sec,
		baseServer: s,
	}, nil
}
