// Code generated by ogen, DO NOT EDIT.

package censusmanagement

import (
	"net/http"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"

	ht "github.com/ogen-go/ogen/http"
)

func encodeCreateSourceResponse(response *SourceResponseStatusCode, w http.ResponseWriter) error {
	if err := func() error {
		if err := response.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "validate")
	}
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	code := response.StatusCode
	if code == 0 {
		// Set default status code.
		code = http.StatusOK
	}
	w.WriteHeader(code)

	e := new(jx.Encoder)
	response.Response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	if code >= http.StatusInternalServerError {
		return errors.Wrapf(ht.ErrInternalServerErrorResponse, "code: %d, message: %s", code, http.StatusText(code))
	}
	return nil
}

func encodeDeleteSourceResponse(response *StatusResponseStatusCode, w http.ResponseWriter) error {
	if err := func() error {
		if err := response.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "validate")
	}
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	code := response.StatusCode
	if code == 0 {
		// Set default status code.
		code = http.StatusOK
	}
	w.WriteHeader(code)

	e := new(jx.Encoder)
	response.Response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	if code >= http.StatusInternalServerError {
		return errors.Wrapf(ht.ErrInternalServerErrorResponse, "code: %d, message: %s", code, http.StatusText(code))
	}
	return nil
}

func encodeGetSourceResponse(response *SourceResponseStatusCode, w http.ResponseWriter) error {
	if err := func() error {
		if err := response.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "validate")
	}
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	code := response.StatusCode
	if code == 0 {
		// Set default status code.
		code = http.StatusOK
	}
	w.WriteHeader(code)

	e := new(jx.Encoder)
	response.Response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	if code >= http.StatusInternalServerError {
		return errors.Wrapf(ht.ErrInternalServerErrorResponse, "code: %d, message: %s", code, http.StatusText(code))
	}
	return nil
}

func encodeUpdateSourceResponse(response *SourceResponseStatusCode, w http.ResponseWriter) error {
	if err := func() error {
		if err := response.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "validate")
	}
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	code := response.StatusCode
	if code == 0 {
		// Set default status code.
		code = http.StatusOK
	}
	w.WriteHeader(code)

	e := new(jx.Encoder)
	response.Response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	if code >= http.StatusInternalServerError {
		return errors.Wrapf(ht.ErrInternalServerErrorResponse, "code: %d, message: %s", code, http.StatusText(code))
	}
	return nil
}

func encodeErrorResponse(response *StatusResponseStatusCode, w http.ResponseWriter) error {
	if err := func() error {
		if err := response.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "validate")
	}
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	code := response.StatusCode
	if code == 0 {
		// Set default status code.
		code = http.StatusOK
	}
	w.WriteHeader(code)

	e := new(jx.Encoder)
	response.Response.Encode(e)
	if _, err := e.WriteTo(w); err != nil {
		return errors.Wrap(err, "write")
	}

	if code >= http.StatusInternalServerError {
		return errors.Wrapf(ht.ErrInternalServerErrorResponse, "code: %d, message: %s", code, http.StatusText(code))
	}
	return nil

}
