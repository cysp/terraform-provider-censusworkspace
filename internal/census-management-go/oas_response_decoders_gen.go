// Code generated by ogen, DO NOT EDIT.

package client

import (
	"io"
	"mime"
	"net/http"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"

	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/validate"
)

func decodeCreateSourceResponse(resp *http.Response) (res *CreateSource2XXStatusCode, _ error) {
	switch resp.StatusCode / 100 {
	case 2:
		// Pattern 2XX.
		res, err := func() (res *CreateSource2XXStatusCode, err error) {
			ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
			if err != nil {
				return res, errors.Wrap(err, "parse media type")
			}
			switch {
			case ct == "application/json":
				buf, err := io.ReadAll(resp.Body)
				if err != nil {
					return res, err
				}
				d := jx.DecodeBytes(buf)

				var response CreateSource2XX
				if err := func() error {
					if err := response.Decode(d); err != nil {
						return err
					}
					if err := d.Skip(); err != io.EOF {
						return errors.New("unexpected trailing data")
					}
					return nil
				}(); err != nil {
					err = &ogenerrors.DecodeBodyError{
						ContentType: ct,
						Body:        buf,
						Err:         err,
					}
					return res, err
				}
				// Validate response.
				if err := func() error {
					if err := response.Validate(); err != nil {
						return err
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "validate")
				}
				return &CreateSource2XXStatusCode{
					StatusCode: resp.StatusCode,
					Response:   response,
				}, nil
			default:
				return res, validate.InvalidContentType(ct)
			}
		}()
		if err != nil {
			return res, errors.Wrapf(err, "pattern 2XX (code %d)", resp.StatusCode)
		}
		return res, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeDeleteSourceResponse(resp *http.Response) (res *StatusStatusCode, _ error) {
	switch resp.StatusCode / 100 {
	case 2:
		// Pattern 2XX.
		res, err := func() (res *StatusStatusCode, err error) {
			ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
			if err != nil {
				return res, errors.Wrap(err, "parse media type")
			}
			switch {
			case ct == "application/json":
				buf, err := io.ReadAll(resp.Body)
				if err != nil {
					return res, err
				}
				d := jx.DecodeBytes(buf)

				var response Status
				if err := func() error {
					if err := response.Decode(d); err != nil {
						return err
					}
					if err := d.Skip(); err != io.EOF {
						return errors.New("unexpected trailing data")
					}
					return nil
				}(); err != nil {
					err = &ogenerrors.DecodeBodyError{
						ContentType: ct,
						Body:        buf,
						Err:         err,
					}
					return res, err
				}
				// Validate response.
				if err := func() error {
					if err := response.Validate(); err != nil {
						return err
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "validate")
				}
				return &StatusStatusCode{
					StatusCode: resp.StatusCode,
					Response:   response,
				}, nil
			default:
				return res, validate.InvalidContentType(ct)
			}
		}()
		if err != nil {
			return res, errors.Wrapf(err, "pattern 2XX (code %d)", resp.StatusCode)
		}
		return res, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeGetSourceResponse(resp *http.Response) (res *GetSourceOK, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			buf, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}
			d := jx.DecodeBytes(buf)

			var response GetSourceOK
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				if err := d.Skip(); err != io.EOF {
					return errors.New("unexpected trailing data")
				}
				return nil
			}(); err != nil {
				err = &ogenerrors.DecodeBodyError{
					ContentType: ct,
					Body:        buf,
					Err:         err,
				}
				return res, err
			}
			// Validate response.
			if err := func() error {
				if err := response.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return res, errors.Wrap(err, "validate")
			}
			return &response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeUpdateSourceResponse(resp *http.Response) (res *UpdateSource2XXStatusCode, _ error) {
	switch resp.StatusCode / 100 {
	case 2:
		// Pattern 2XX.
		res, err := func() (res *UpdateSource2XXStatusCode, err error) {
			ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
			if err != nil {
				return res, errors.Wrap(err, "parse media type")
			}
			switch {
			case ct == "application/json":
				buf, err := io.ReadAll(resp.Body)
				if err != nil {
					return res, err
				}
				d := jx.DecodeBytes(buf)

				var response UpdateSource2XX
				if err := func() error {
					if err := response.Decode(d); err != nil {
						return err
					}
					if err := d.Skip(); err != io.EOF {
						return errors.New("unexpected trailing data")
					}
					return nil
				}(); err != nil {
					err = &ogenerrors.DecodeBodyError{
						ContentType: ct,
						Body:        buf,
						Err:         err,
					}
					return res, err
				}
				// Validate response.
				if err := func() error {
					if err := response.Validate(); err != nil {
						return err
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "validate")
				}
				return &UpdateSource2XXStatusCode{
					StatusCode: resp.StatusCode,
					Response:   response,
				}, nil
			default:
				return res, validate.InvalidContentType(ct)
			}
		}()
		if err != nil {
			return res, errors.Wrapf(err, "pattern 2XX (code %d)", resp.StatusCode)
		}
		return res, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}
