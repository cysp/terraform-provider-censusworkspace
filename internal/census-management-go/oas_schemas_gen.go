// Code generated by ogen, DO NOT EDIT.

package censusmanagement

import (
	"fmt"

	"github.com/go-faster/errors"
)

func (s *StatusResponseStatusCode) Error() string {
	return fmt.Sprintf("code %d: %+v", s.StatusCode, s.Response)
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/components/schemas/ResponseStatus
type ResponseStatus string

const (
	ResponseStatusSuccess  ResponseStatus = "success"
	ResponseStatusUpdated  ResponseStatus = "updated"
	ResponseStatusCreated  ResponseStatus = "created"
	ResponseStatusNotFound ResponseStatus = "not_found"
	ResponseStatusError    ResponseStatus = "error"
)

// AllValues returns all ResponseStatus values.
func (ResponseStatus) AllValues() []ResponseStatus {
	return []ResponseStatus{
		ResponseStatusSuccess,
		ResponseStatusUpdated,
		ResponseStatusCreated,
		ResponseStatusNotFound,
		ResponseStatusError,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ResponseStatus) MarshalText() ([]byte, error) {
	switch s {
	case ResponseStatusSuccess:
		return []byte(s), nil
	case ResponseStatusUpdated:
		return []byte(s), nil
	case ResponseStatusCreated:
		return []byte(s), nil
	case ResponseStatusNotFound:
		return []byte(s), nil
	case ResponseStatusError:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ResponseStatus) UnmarshalText(data []byte) error {
	switch ResponseStatus(data) {
	case ResponseStatusSuccess:
		*s = ResponseStatusSuccess
		return nil
	case ResponseStatusUpdated:
		*s = ResponseStatusUpdated
		return nil
	case ResponseStatusCreated:
		*s = ResponseStatusCreated
		return nil
	case ResponseStatusNotFound:
		*s = ResponseStatusNotFound
		return nil
	case ResponseStatusError:
		*s = ResponseStatusError
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type StatusResponse struct {
	Status  ResponseStatus `json:"status"`
	Message OptString      `json:"message"`
}

// GetStatus returns the value of Status.
func (s *StatusResponse) GetStatus() ResponseStatus {
	return s.Status
}

// GetMessage returns the value of Message.
func (s *StatusResponse) GetMessage() OptString {
	return s.Message
}

// SetStatus sets the value of Status.
func (s *StatusResponse) SetStatus(val ResponseStatus) {
	s.Status = val
}

// SetMessage sets the value of Message.
func (s *StatusResponse) SetMessage(val OptString) {
	s.Message = val
}

// StatusResponseStatusCode wraps StatusResponse with StatusCode.
type StatusResponseStatusCode struct {
	StatusCode int
	Response   StatusResponse
}

// GetStatusCode returns the value of StatusCode.
func (s *StatusResponseStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *StatusResponseStatusCode) GetResponse() StatusResponse {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *StatusResponseStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *StatusResponseStatusCode) SetResponse(val StatusResponse) {
	s.Response = val
}

type WorkspaceApiKey struct {
	Token string
	Roles []string
}

// GetToken returns the value of Token.
func (s *WorkspaceApiKey) GetToken() string {
	return s.Token
}

// GetRoles returns the value of Roles.
func (s *WorkspaceApiKey) GetRoles() []string {
	return s.Roles
}

// SetToken sets the value of Token.
func (s *WorkspaceApiKey) SetToken(val string) {
	s.Token = val
}

// SetRoles sets the value of Roles.
func (s *WorkspaceApiKey) SetRoles(val []string) {
	s.Roles = val
}
