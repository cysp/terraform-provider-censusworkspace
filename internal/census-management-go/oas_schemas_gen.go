// Code generated by ogen, DO NOT EDIT.

package censusmanagement

import (
	"fmt"
	"time"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"
)

func (s *StatusResponseStatusCode) Error() string {
	return fmt.Sprintf("code %d: %+v", s.StatusCode, s.Response)
}

// Ref: #/components/schemas/CreateSourceBody
type CreateSourceBody struct {
	Connection CreateSourceBodyConnection `json:"connection"`
}

// GetConnection returns the value of Connection.
func (s *CreateSourceBody) GetConnection() CreateSourceBodyConnection {
	return s.Connection
}

// SetConnection sets the value of Connection.
func (s *CreateSourceBody) SetConnection(val CreateSourceBodyConnection) {
	s.Connection = val
}

type CreateSourceBodyConnection struct {
	// The type of the data source. A valid type is the service_name of a source type returned from the
	// /source_types endpoint, where the source type is marked as creatable_via_api.
	Type string `json:"type"`
	// The sync engine type for this source. Can only be set during creation and cannot be modified after.
	SyncEngine OptString `json:"sync_engine"`
	// An optional label that can be assigned to the source for better categorization or identification.
	Label OptNilString `json:"label"`
	// Credentials that should be associated with this source (e.g. hostname, port).
	Credentials jx.Raw `json:"credentials"`
}

// GetType returns the value of Type.
func (s *CreateSourceBodyConnection) GetType() string {
	return s.Type
}

// GetSyncEngine returns the value of SyncEngine.
func (s *CreateSourceBodyConnection) GetSyncEngine() OptString {
	return s.SyncEngine
}

// GetLabel returns the value of Label.
func (s *CreateSourceBodyConnection) GetLabel() OptNilString {
	return s.Label
}

// GetCredentials returns the value of Credentials.
func (s *CreateSourceBodyConnection) GetCredentials() jx.Raw {
	return s.Credentials
}

// SetType sets the value of Type.
func (s *CreateSourceBodyConnection) SetType(val string) {
	s.Type = val
}

// SetSyncEngine sets the value of SyncEngine.
func (s *CreateSourceBodyConnection) SetSyncEngine(val OptString) {
	s.SyncEngine = val
}

// SetLabel sets the value of Label.
func (s *CreateSourceBodyConnection) SetLabel(val OptNilString) {
	s.Label = val
}

// SetCredentials sets the value of Credentials.
func (s *CreateSourceBodyConnection) SetCredentials(val jx.Raw) {
	s.Credentials = val
}

type IdResponse struct {
	Status ResponseStatus `json:"status"`
	Data   IdResponseData `json:"data"`
}

// GetStatus returns the value of Status.
func (s *IdResponse) GetStatus() ResponseStatus {
	return s.Status
}

// GetData returns the value of Data.
func (s *IdResponse) GetData() IdResponseData {
	return s.Data
}

// SetStatus sets the value of Status.
func (s *IdResponse) SetStatus(val ResponseStatus) {
	s.Status = val
}

// SetData sets the value of Data.
func (s *IdResponse) SetData(val IdResponseData) {
	s.Data = val
}

type IdResponseData struct {
	ID int64 `json:"id"`
}

// GetID returns the value of ID.
func (s *IdResponseData) GetID() int64 {
	return s.ID
}

// SetID sets the value of ID.
func (s *IdResponseData) SetID(val int64) {
	s.ID = val
}

// IdResponseStatusCode wraps IdResponse with StatusCode.
type IdResponseStatusCode struct {
	StatusCode int
	Response   IdResponse
}

// GetStatusCode returns the value of StatusCode.
func (s *IdResponseStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *IdResponseStatusCode) GetResponse() IdResponse {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *IdResponseStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *IdResponseStatusCode) SetResponse(val IdResponse) {
	s.Response = val
}

// NewNilString returns new NilString with value set to v.
func NewNilString(v string) NilString {
	return NilString{
		Value: v,
	}
}

// NilString is nullable string.
type NilString struct {
	Value string
	Null  bool
}

// SetTo sets value to v.
func (o *NilString) SetTo(v string) {
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o NilString) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *NilString) SetToNull() {
	o.Null = true
	var v string
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilString) Get() (v string, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilBool returns new OptNilBool with value set to v.
func NewOptNilBool(v bool) OptNilBool {
	return OptNilBool{
		Value: v,
		Set:   true,
	}
}

// OptNilBool is optional nullable bool.
type OptNilBool struct {
	Value bool
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilBool was set.
func (o OptNilBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilBool) SetTo(v bool) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilBool) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilBool) SetToNull() {
	o.Set = true
	o.Null = true
	var v bool
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilBool) Get() (v bool, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilDateTime returns new OptNilDateTime with value set to v.
func NewOptNilDateTime(v time.Time) OptNilDateTime {
	return OptNilDateTime{
		Value: v,
		Set:   true,
	}
}

// OptNilDateTime is optional nullable time.Time.
type OptNilDateTime struct {
	Value time.Time
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilDateTime was set.
func (o OptNilDateTime) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilDateTime) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilDateTime) SetTo(v time.Time) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilDateTime) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilDateTime) SetToNull() {
	o.Set = true
	o.Null = true
	var v time.Time
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilDateTime) Get() (v time.Time, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilDateTime) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilString returns new OptNilString with value set to v.
func NewOptNilString(v string) OptNilString {
	return OptNilString{
		Value: v,
		Set:   true,
	}
}

// OptNilString is optional nullable string.
type OptNilString struct {
	Value string
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilString was set.
func (o OptNilString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilString) Reset() {
	var v string
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilString) SetTo(v string) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilString) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilString) SetToNull() {
	o.Set = true
	o.Null = true
	var v string
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilString) Get() (v string, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/components/schemas/ResponseStatus
type ResponseStatus string

const (
	ResponseStatusSuccess  ResponseStatus = "success"
	ResponseStatusUpdated  ResponseStatus = "updated"
	ResponseStatusCreated  ResponseStatus = "created"
	ResponseStatusDeleted  ResponseStatus = "deleted"
	ResponseStatusNotFound ResponseStatus = "not_found"
	ResponseStatusError    ResponseStatus = "error"
)

// AllValues returns all ResponseStatus values.
func (ResponseStatus) AllValues() []ResponseStatus {
	return []ResponseStatus{
		ResponseStatusSuccess,
		ResponseStatusUpdated,
		ResponseStatusCreated,
		ResponseStatusDeleted,
		ResponseStatusNotFound,
		ResponseStatusError,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ResponseStatus) MarshalText() ([]byte, error) {
	switch s {
	case ResponseStatusSuccess:
		return []byte(s), nil
	case ResponseStatusUpdated:
		return []byte(s), nil
	case ResponseStatusCreated:
		return []byte(s), nil
	case ResponseStatusDeleted:
		return []byte(s), nil
	case ResponseStatusNotFound:
		return []byte(s), nil
	case ResponseStatusError:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ResponseStatus) UnmarshalText(data []byte) error {
	switch ResponseStatus(data) {
	case ResponseStatusSuccess:
		*s = ResponseStatusSuccess
		return nil
	case ResponseStatusUpdated:
		*s = ResponseStatusUpdated
		return nil
	case ResponseStatusCreated:
		*s = ResponseStatusCreated
		return nil
	case ResponseStatusDeleted:
		*s = ResponseStatusDeleted
		return nil
	case ResponseStatusNotFound:
		*s = ResponseStatusNotFound
		return nil
	case ResponseStatusError:
		*s = ResponseStatusError
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/SourceData
type SourceData struct {
	// The unique identifier of the source.
	ID int64 `json:"id"`
	// The name assigned to this source, typically a combination of type and location.
	Name string `json:"name"`
	// The type of the data source. A valid type is the service_name of a source type returned from the
	// /source_types endpoint, where the source type is marked as creatable_via_api.
	Type string `json:"type"`
	// The sync engine type for this source.
	SyncEngine OptString `json:"sync_engine"`
	// An optional label that can be assigned to the source for better categorization or identification.
	Label             NilString `json:"label"`
	ConnectionDetails jx.Raw    `json:"connection_details"`
	// The timestamp when the source was created.
	CreatedAt time.Time `json:"created_at"`
	// Indicates if the last connection test to this source was successful.
	LastTestSucceeded OptNilBool `json:"last_test_succeeded"`
	// Timestamp of when the last connection test was conducted on this source.
	LastTestedAt OptNilDateTime `json:"last_tested_at"`
}

// GetID returns the value of ID.
func (s *SourceData) GetID() int64 {
	return s.ID
}

// GetName returns the value of Name.
func (s *SourceData) GetName() string {
	return s.Name
}

// GetType returns the value of Type.
func (s *SourceData) GetType() string {
	return s.Type
}

// GetSyncEngine returns the value of SyncEngine.
func (s *SourceData) GetSyncEngine() OptString {
	return s.SyncEngine
}

// GetLabel returns the value of Label.
func (s *SourceData) GetLabel() NilString {
	return s.Label
}

// GetConnectionDetails returns the value of ConnectionDetails.
func (s *SourceData) GetConnectionDetails() jx.Raw {
	return s.ConnectionDetails
}

// GetCreatedAt returns the value of CreatedAt.
func (s *SourceData) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetLastTestSucceeded returns the value of LastTestSucceeded.
func (s *SourceData) GetLastTestSucceeded() OptNilBool {
	return s.LastTestSucceeded
}

// GetLastTestedAt returns the value of LastTestedAt.
func (s *SourceData) GetLastTestedAt() OptNilDateTime {
	return s.LastTestedAt
}

// SetID sets the value of ID.
func (s *SourceData) SetID(val int64) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *SourceData) SetName(val string) {
	s.Name = val
}

// SetType sets the value of Type.
func (s *SourceData) SetType(val string) {
	s.Type = val
}

// SetSyncEngine sets the value of SyncEngine.
func (s *SourceData) SetSyncEngine(val OptString) {
	s.SyncEngine = val
}

// SetLabel sets the value of Label.
func (s *SourceData) SetLabel(val NilString) {
	s.Label = val
}

// SetConnectionDetails sets the value of ConnectionDetails.
func (s *SourceData) SetConnectionDetails(val jx.Raw) {
	s.ConnectionDetails = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *SourceData) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetLastTestSucceeded sets the value of LastTestSucceeded.
func (s *SourceData) SetLastTestSucceeded(val OptNilBool) {
	s.LastTestSucceeded = val
}

// SetLastTestedAt sets the value of LastTestedAt.
func (s *SourceData) SetLastTestedAt(val OptNilDateTime) {
	s.LastTestedAt = val
}

type SourceResponse struct {
	Status ResponseStatus `json:"status"`
	Data   SourceData     `json:"data"`
}

// GetStatus returns the value of Status.
func (s *SourceResponse) GetStatus() ResponseStatus {
	return s.Status
}

// GetData returns the value of Data.
func (s *SourceResponse) GetData() SourceData {
	return s.Data
}

// SetStatus sets the value of Status.
func (s *SourceResponse) SetStatus(val ResponseStatus) {
	s.Status = val
}

// SetData sets the value of Data.
func (s *SourceResponse) SetData(val SourceData) {
	s.Data = val
}

// SourceResponseStatusCode wraps SourceResponse with StatusCode.
type SourceResponseStatusCode struct {
	StatusCode int
	Response   SourceResponse
}

// GetStatusCode returns the value of StatusCode.
func (s *SourceResponseStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *SourceResponseStatusCode) GetResponse() SourceResponse {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *SourceResponseStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *SourceResponseStatusCode) SetResponse(val SourceResponse) {
	s.Response = val
}

type StatusResponse struct {
	Status  StatusResponseStatus `json:"status"`
	Message OptString            `json:"message"`
}

// GetStatus returns the value of Status.
func (s *StatusResponse) GetStatus() StatusResponseStatus {
	return s.Status
}

// GetMessage returns the value of Message.
func (s *StatusResponse) GetMessage() OptString {
	return s.Message
}

// SetStatus sets the value of Status.
func (s *StatusResponse) SetStatus(val StatusResponseStatus) {
	s.Status = val
}

// SetMessage sets the value of Message.
func (s *StatusResponse) SetMessage(val OptString) {
	s.Message = val
}

// StatusResponseStatus represents sum type.
type StatusResponseStatus struct {
	Type           StatusResponseStatusType // switch on this field
	ResponseStatus ResponseStatus
	Int            int
}

// StatusResponseStatusType is oneOf type of StatusResponseStatus.
type StatusResponseStatusType string

// Possible values for StatusResponseStatusType.
const (
	ResponseStatusStatusResponseStatus StatusResponseStatusType = "ResponseStatus"
	IntStatusResponseStatus            StatusResponseStatusType = "int"
)

// IsResponseStatus reports whether StatusResponseStatus is ResponseStatus.
func (s StatusResponseStatus) IsResponseStatus() bool {
	return s.Type == ResponseStatusStatusResponseStatus
}

// IsInt reports whether StatusResponseStatus is int.
func (s StatusResponseStatus) IsInt() bool { return s.Type == IntStatusResponseStatus }

// SetResponseStatus sets StatusResponseStatus to ResponseStatus.
func (s *StatusResponseStatus) SetResponseStatus(v ResponseStatus) {
	s.Type = ResponseStatusStatusResponseStatus
	s.ResponseStatus = v
}

// GetResponseStatus returns ResponseStatus and true boolean if StatusResponseStatus is ResponseStatus.
func (s StatusResponseStatus) GetResponseStatus() (v ResponseStatus, ok bool) {
	if !s.IsResponseStatus() {
		return v, false
	}
	return s.ResponseStatus, true
}

// NewResponseStatusStatusResponseStatus returns new StatusResponseStatus from ResponseStatus.
func NewResponseStatusStatusResponseStatus(v ResponseStatus) StatusResponseStatus {
	var s StatusResponseStatus
	s.SetResponseStatus(v)
	return s
}

// SetInt sets StatusResponseStatus to int.
func (s *StatusResponseStatus) SetInt(v int) {
	s.Type = IntStatusResponseStatus
	s.Int = v
}

// GetInt returns int and true boolean if StatusResponseStatus is int.
func (s StatusResponseStatus) GetInt() (v int, ok bool) {
	if !s.IsInt() {
		return v, false
	}
	return s.Int, true
}

// NewIntStatusResponseStatus returns new StatusResponseStatus from int.
func NewIntStatusResponseStatus(v int) StatusResponseStatus {
	var s StatusResponseStatus
	s.SetInt(v)
	return s
}

// StatusResponseStatusCode wraps StatusResponse with StatusCode.
type StatusResponseStatusCode struct {
	StatusCode int
	Response   StatusResponse
}

// GetStatusCode returns the value of StatusCode.
func (s *StatusResponseStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *StatusResponseStatusCode) GetResponse() StatusResponse {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *StatusResponseStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *StatusResponseStatusCode) SetResponse(val StatusResponse) {
	s.Response = val
}

// Ref: #/components/schemas/UpdateSourceBody
type UpdateSourceBody struct {
	Connection UpdateSourceBodyConnection `json:"connection"`
}

// GetConnection returns the value of Connection.
func (s *UpdateSourceBody) GetConnection() UpdateSourceBodyConnection {
	return s.Connection
}

// SetConnection sets the value of Connection.
func (s *UpdateSourceBody) SetConnection(val UpdateSourceBodyConnection) {
	s.Connection = val
}

type UpdateSourceBodyConnection struct {
	// An optional label that can be assigned to the source for better categorization or identification.
	Label OptNilString `json:"label"`
	// Credentials that should be associated with this source (e.g. hostname, port).
	Credentials jx.Raw `json:"credentials"`
}

// GetLabel returns the value of Label.
func (s *UpdateSourceBodyConnection) GetLabel() OptNilString {
	return s.Label
}

// GetCredentials returns the value of Credentials.
func (s *UpdateSourceBodyConnection) GetCredentials() jx.Raw {
	return s.Credentials
}

// SetLabel sets the value of Label.
func (s *UpdateSourceBodyConnection) SetLabel(val OptNilString) {
	s.Label = val
}

// SetCredentials sets the value of Credentials.
func (s *UpdateSourceBodyConnection) SetCredentials(val jx.Raw) {
	s.Credentials = val
}

type WorkspaceApiKey struct {
	Token string
	Roles []string
}

// GetToken returns the value of Token.
func (s *WorkspaceApiKey) GetToken() string {
	return s.Token
}

// GetRoles returns the value of Roles.
func (s *WorkspaceApiKey) GetRoles() []string {
	return s.Roles
}

// SetToken sets the value of Token.
func (s *WorkspaceApiKey) SetToken(val string) {
	s.Token = val
}

// SetRoles sets the value of Roles.
func (s *WorkspaceApiKey) SetRoles(val []string) {
	s.Roles = val
}
